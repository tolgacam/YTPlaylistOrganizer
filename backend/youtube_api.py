from __future__ import annotations
from typing import Dict, List, Optional
import os
import json

from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import google.oauth2.credentials

SCOPES = ["https://www.googleapis.com/auth/youtube"]

CLIENT_SECRET = os.path.join(os.path.dirname(__file__), "client_secret.json")
TOKEN_PATH = os.path.join(os.path.dirname(__file__), "token.json")

def get_youtube_service():
    creds = None
    if os.path.exists(TOKEN_PATH):
        creds = google.oauth2.credentials.Credentials.from_authorized_user_file(TOKEN_PATH, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN_PATH, "w") as f:
            f.write(creds.to_json())

    return build("youtube", "v3", credentials=creds)

def ensure_playlists(service, labels: List[str], prefix: str = "SPO: " ) -> Dict[str, str]:
    """
    Ensure a playlist exists for each label; return {label -> playlistId}.
    Reuses existing playlists starting with prefix+label.
    """
    existing: Dict[str, str] = {}
    # page through user's playlists
    request = service.playlists().list(part="snippet,contentDetails", mine=True, maxResults=50)
    while request is not None:
        resp = request.execute()
        for pl in resp.get("items", []):
            name = pl["snippet"]["title"]
            if name.startswith(prefix):
                # capture label part
                label = name.replace(prefix, "", 1)
                existing[label] = pl["id"]
        request = service.playlists().list_next(previous_request=request, previous_response=resp)

    result: Dict[str, str] = {}
    for label in labels:
        if label in existing:
            result[label] = existing[label]
            continue
        # create new playlist
        body = {
            "snippet": {
                "title": f"{prefix}{label}",
                "description": f"Auto-generated by Smart Playlist Organizer for category: {label}",
                "defaultLanguage": "en",
            },
            "status": {"privacyStatus": "unlisted"}   # change to "public" if you want
        }
        pl = service.playlists().insert(part="snippet,status", body=body).execute()
        result[label] = pl["id"]
    return result

def add_videos_to_playlist(service, playlist_id: str, video_ids: List[str]) -> int:
    """
    Add multiple videos to a playlist; returns number added (best-effort).
    Skips None/empty IDs.
    """
    added = 0
    for vid in video_ids:
        if not vid:
            continue
        body = {
            "snippet": {
                "playlistId": playlist_id,
                "resourceId": {"kind": "youtube#video", "videoId": vid}
            }
        }
        service.playlistItems().insert(part="snippet", body=body).execute()
        added += 1
    return added

def playlist_web_link(playlist_id: str) -> str:
    return f"https://www.youtube.com/playlist?list={playlist_id}"